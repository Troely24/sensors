# Workspace ONE UEM Windows Sensor: Migration Conflict Detection
# Detects Windows Update and GPO conflicts that may interfere with modern management
# Returns: String value for compliance status and conflict details
# Author: Migration Assessment Tool
# Version: 1.1

# Initialize variables
$conflictDetails = @()
$conflictCount = 0
$overallStatus = "COMPLIANT"

# Function to add conflict to results
function Add-Conflict {
    param(
        [string]$Type,
        [string]$Description,
        [string]$Impact,
        [string]$Location
    )
    
    $script:conflictDetails += "$Type|$Description|$Impact|$Location"
    $script:conflictCount++
    
    if ($Impact -eq "HIGH") {
        $script:overallStatus = "NON_COMPLIANT"
    } elseif ($Impact -eq "MEDIUM" -and $script:overallStatus -eq "COMPLIANT") {
        $script:overallStatus = "WARNING"
    }
}

# Check Windows Update conflicts
try {
    # Check WSUS configuration
    $wsusServer = Get-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate" -Name "WUServer" -ErrorAction SilentlyContinue
    if ($wsusServer) {
        Add-Conflict -Type "WSUS_SERVER" -Description "WSUS server configured: $($wsusServer.WUServer)" -Impact "HIGH" -Location "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\WUServer"
    }
    
    $wsusStatusServer = Get-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate" -Name "WUStatusServer" -ErrorAction SilentlyContinue
    if ($wsusStatusServer) {
        Add-Conflict -Type "WSUS_STATUS" -Description "WSUS status server configured: $($wsusStatusServer.WUStatusServer)" -Impact "HIGH" -Location "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\WUStatusServer"
    }
    
    # Check UseWUServer setting
    $useWUServer = Get-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU" -Name "UseWUServer" -ErrorAction SilentlyContinue
    if ($useWUServer -and $useWUServer.UseWUServer -eq 1) {
        Add-Conflict -Type "USE_WSUS" -Description "Device configured to use WSUS server" -Impact "HIGH" -Location "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU\UseWUServer"
    }
    
    # Check NoAutoUpdate
    $noAutoUpdate = Get-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU" -Name "NoAutoUpdate" -ErrorAction SilentlyContinue
    if ($noAutoUpdate -and $noAutoUpdate.NoAutoUpdate -eq 1) {
        Add-Conflict -Type "NO_AUTO_UPDATE" -Description "Automatic Updates disabled via policy" -Impact "HIGH" -Location "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU\NoAutoUpdate"
    }
    
    # Check AUOptions
    $auOptions = Get-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU" -Name "AUOptions" -ErrorAction SilentlyContinue
    if ($auOptions) {
        Add-Conflict -Type "AU_OPTIONS" -Description "Automatic Update options configured: $($auOptions.AUOptions)" -Impact "MEDIUM" -Location "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU\AUOptions"
    }
    
    # Check Windows Update service
    $wuauserv = Get-Service -Name "wuauserv" -ErrorAction SilentlyContinue
    if ($wuauserv -and $wuauserv.StartType -eq "Disabled") {
        Add-Conflict -Type "WU_SERVICE_DISABLED" -Description "Windows Update service is disabled" -Impact "HIGH" -Location "Service: wuauserv"
    }
    
    # Check DisableWindowsUpdateAccess
    $disableWUAccess = Get-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate" -Name "DisableWindowsUpdateAccess" -ErrorAction SilentlyContinue
    if ($disableWUAccess -and $disableWUAccess.DisableWindowsUpdateAccess -eq 1) {
        Add-Conflict -Type "WU_ACCESS_DISABLED" -Description "Windows Update access disabled" -Impact "HIGH" -Location "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\DisableWindowsUpdateAccess"
    }
} catch {
    Add-Conflict -Type "WU_CHECK_ERROR" -Description "Error checking Windows Update settings: $($_.Exception.Message)" -Impact "LOW" -Location "Windows Update Registry"
}

# Check GPO conflicts that affect modern management
try {
    # Check MDM registration
    $disableMDM = Get-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\CurrentVersion\MDM" -Name "DisableRegistration" -ErrorAction SilentlyContinue
    if ($disableMDM -and $disableMDM.DisableRegistration -eq 1) {
        Add-Conflict -Type "MDM_DISABLED" -Description "MDM registration disabled via policy" -Impact "HIGH" -Location "HKLM:\SOFTWARE\Policies\Microsoft\Windows\CurrentVersion\MDM\DisableRegistration"
    }
    
    # Check Windows Store policies
    $disableStore = Get-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\WindowsStore" -Name "DisableStoreApps" -ErrorAction SilentlyContinue
    if ($disableStore -and $disableStore.DisableStoreApps -eq 1) {
        Add-Conflict -Type "STORE_DISABLED" -Description "Windows Store apps disabled" -Impact "MEDIUM" -Location "HKLM:\SOFTWARE\Policies\Microsoft\WindowsStore\DisableStoreApps"
    }
    
    $privateStoreOnly = Get-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\WindowsStore" -Name "RequirePrivateStoreOnly" -ErrorAction SilentlyContinue
    if ($privateStoreOnly -and $privateStoreOnly.RequirePrivateStoreOnly -eq 1) {
        Add-Conflict -Type "PRIVATE_STORE_ONLY" -Description "Private store only policy enabled" -Impact "MEDIUM" -Location "HKLM:\SOFTWARE\Policies\Microsoft\WindowsStore\RequirePrivateStoreOnly"
    }
    
    # Check PowerShell execution policy
    $psExecPolicy = Get-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\PowerShell\ExecutionPolicy" -Name "ExecutionPolicy" -ErrorAction SilentlyContinue
    if ($psExecPolicy) {
        Add-Conflict -Type "PS_EXEC_POLICY" -Description "PowerShell execution policy configured: $($psExecPolicy.ExecutionPolicy)" -Impact "MEDIUM" -Location "HKLM:\SOFTWARE\Policies\Microsoft\Windows\PowerShell\ExecutionPolicy\ExecutionPolicy"
    }
    
    # Check Windows Defender
    $disableDefender = Get-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender" -Name "DisableAntiSpyware" -ErrorAction SilentlyContinue
    if ($disableDefender -and $disableDefender.DisableAntiSpyware -eq 1) {
        Add-Conflict -Type "DEFENDER_DISABLED" -Description "Windows Defender disabled via policy" -Impact "MEDIUM" -Location "HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender\DisableAntiSpyware"
    }
    
    # Check device install restrictions
    $denyDeviceIDs = Get-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\DeviceInstall\Restrictions" -Name "DenyDeviceIDs" -ErrorAction SilentlyContinue
    if ($denyDeviceIDs) {
        Add-Conflict -Type "DEVICE_INSTALL_RESTRICTED" -Description "Device installation restrictions configured" -Impact "MEDIUM" -Location "HKLM:\SOFTWARE\Policies\Microsoft\Windows\DeviceInstall\Restrictions\DenyDeviceIDs"
    }
} catch {
    Add-Conflict -Type "GPO_CHECK_ERROR" -Description "Error checking GPO settings: $($_.Exception.Message)" -Impact "LOW" -Location "GPO Registry"
}

# Check SCCM conflicts
try {
    # Check for SCCM client service
    $ccmExec = Get-Service -Name "CcmExec" -ErrorAction SilentlyContinue
    if ($ccmExec) {
        Add-Conflict -Type "SCCM_CLIENT" -Description "SCCM Client service found - Status: $($ccmExec.Status)" -Impact "HIGH" -Location "Service: CcmExec"
    }
    
    # Check SCCM SMS Agent Host service
    $smsAgent = Get-Service -Name "smstsmgr" -ErrorAction SilentlyContinue
    if ($smsAgent) {
        Add-Conflict -Type "SCCM_SMS_AGENT" -Description "SCCM SMS Agent service found - Status: $($smsAgent.Status)" -Impact "MEDIUM" -Location "Service: smstsmgr"
    }
    
    # Check SCCM registry
    if (Test-Path "HKLM:\SOFTWARE\Microsoft\SMS") {
        $smsPath = Get-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\SMS\Mobile Client" -Name "ProductVersion" -ErrorAction SilentlyContinue
        if ($smsPath) {
            Add-Conflict -Type "SCCM_REGISTRY" -Description "SCCM client registry keys found - Version: $($smsPath.ProductVersion)" -Impact "MEDIUM" -Location "HKLM:\SOFTWARE\Microsoft\SMS"
        }
    }
    
    # Check CCM registry
    if (Test-Path "HKLM:\SOFTWARE\Microsoft\CCM") {
        Add-Conflict -Type "CCM_REGISTRY" -Description "CCM registry keys found" -Impact "LOW" -Location "HKLM:\SOFTWARE\Microsoft\CCM"
    }
} catch {
    Add-Conflict -Type "SCCM_CHECK_ERROR" -Description "Error checking SCCM settings: $($_.Exception.Message)" -Impact "LOW" -Location "SCCM Components"
}

# Check critical services
try {
    $criticalServices = @("BITS", "Winmgmt", "RpcSs", "EventLog")
    foreach ($serviceName in $criticalServices) {
        $service = Get-Service -Name $serviceName -ErrorAction SilentlyContinue
        if ($service) {
            if ($service.Status -ne "Running" -or $service.StartType -eq "Disabled") {
                Add-Conflict -Type "CRITICAL_SERVICE" -Description "$serviceName service issue - Status: $($service.Status), StartType: $($service.StartType)" -Impact "MEDIUM" -Location "Service: $serviceName"
            }
        }
    }
} catch {
    Add-Conflict -Type "SERVICE_CHECK_ERROR" -Description "Error checking critical services: $($_.Exception.Message)" -Impact "LOW" -Location "Windows Services"
}

# Prepare output in readable format
if ($conflictCount -eq 0) {
    $outputString = "No Conflicts Detected"
} else {
    # Create readable output with conflict summary
    if ($overallStatus -eq "NON_COMPLIANT") {
        $statusText = "Possible Issues"
    } else {
        $statusText = $overallStatus
    }
    $outputString = "Ready for Workspace ONE Management Status: $statusText | Total Possible Conflicts: $conflictCount`n`n"
    
    # Group conflicts by type for better readability
    $windowsUpdateConflicts = $conflictDetails | Where-Object { $_ -like "*WSUS*" -or $_ -like "*WU_*" -or $_ -like "*NO_AUTO_UPDATE*" -or $_ -like "*AU_OPTIONS*" }
    $gpoConflicts = $conflictDetails | Where-Object { $_ -like "*MDM*" -or $_ -like "*STORE*" -or $_ -like "*PS_EXEC*" -or $_ -like "*DEFENDER*" -or $_ -like "*DEVICE_INSTALL*" }
    $sccmConflicts = $conflictDetails | Where-Object { $_ -like "*SCCM*" -or $_ -like "*CCM*" }
    $serviceConflicts = $conflictDetails | Where-Object { $_ -like "*SERVICE*" }
    
    # Windows Update Conflicts Section
    if ($windowsUpdateConflicts.Count -gt 0) {
        $outputString += "WINDOWS UPDATE CONFLICTS ($($windowsUpdateConflicts.Count)):`n"
        foreach ($conflict in $windowsUpdateConflicts) {
            $parts = $conflict -split '\|'
            $impact = $parts[2]
            $description = $parts[1]
            
            $outputString += "  [$impact] $description`n"
        }
        $outputString += "`n"
    }
    
    # GPO Conflicts Section
    if ($gpoConflicts.Count -gt 0) {
        $outputString += "GROUP POLICY CONFLICTS ($($gpoConflicts.Count)):`n"
        foreach ($conflict in $gpoConflicts) {
            $parts = $conflict -split '\|'
            $impact = $parts[2]
            $description = $parts[1]
            
            $outputString += "  [$impact] $description`n"
        }
        $outputString += "`n"
    }
    
    # SCCM Conflicts Section
    if ($sccmConflicts.Count -gt 0) {
        $outputString += "SCCM CONFLICTS ($($sccmConflicts.Count)):`n"
        foreach ($conflict in $sccmConflicts) {
            $parts = $conflict -split '\|'
            $impact = $parts[2]
            $description = $parts[1]
            
            $outputString += "  [$impact] $description`n"
        }
        $outputString += "`n"
    }
    
    # Service Conflicts Section
    if ($serviceConflicts.Count -gt 0) {
        $outputString += "SERVICE CONFLICTS ($($serviceConflicts.Count)):`n"
        foreach ($conflict in $serviceConflicts) {
            $parts = $conflict -split '\|'
            $impact = $parts[2]
            $description = $parts[1]
            
            $outputString += "  [$impact] $description`n"
        }
        $outputString += "`n"
    }
    
    # Add priority summary
    $highImpactCount = ($conflictDetails | Where-Object { $_ -like "*|HIGH|*" }).Count
    if ($highImpactCount -gt 0) {
        $outputString += "PRIORITY ACTION REQUIRED: $highImpactCount HIGH impact conflicts detected"
    }
}

# Return the formatted result
return $outputString
