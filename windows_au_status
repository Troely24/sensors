# Description: Windows Update Connectivity and GPO Blocking Detection
# Execution Context: SYSTEM
# Execution Architecture: EITHER64OR32BIT
# Return Type: STRING

# Initialize arrays to track check results
$failedChecks = @()
$warningChecks = @()

try {
    # Modified Windows Update Service Status Check
    $wuService = Get-Service -Name "wuauserv" -ErrorAction SilentlyContinue
    if ($wuService) {
        if ($wuService.Status -ne "Running") {
            # Return "No Issues" when Windows Update Service is not running
            return "No Issues"
        }
    } else {
        $failedChecks += "Windows Update Service: Not Found"
    }

    # Check BITS Service
    $bitsService = Get-Service -Name "BITS" -ErrorAction SilentlyContinue
    if (-not $bitsService -or $bitsService.Status -ne "Running") {
        $failedChecks += "BITS Service: $($bitsService.Status)"
    }

    # Check Cryptographic Services
    $cryptSvc = Get-Service -Name "CryptSvc" -ErrorAction SilentlyContinue
    if (-not $cryptSvc -or $cryptSvc.Status -ne "Running") {
        $failedChecks += "Cryptographic Service: $($cryptSvc.Status)"
    }

    # Test Microsoft Update connectivity
    $updateUrls = @(
        "windowsupdate.microsoft.com",
        "update.microsoft.com",
        "download.windowsupdate.com"
    )
    
    $connectivityIssues = @()
    foreach ($url in $updateUrls) {
        try {
            $testConnection = Test-NetConnection -ComputerName $url -Port 443 -InformationLevel Quiet -WarningAction SilentlyContinue
            if (-not $testConnection) {
                $connectivityIssues += $url
            }
        } catch {
            $connectivityIssues += $url
        }
    }
    
    if ($connectivityIssues.Count -gt 0) {
        $failedChecks += "Network Access: Cannot reach $($connectivityIssues -join ', ')"
    }

    # Check Windows Update Agent status
    try {
        $updateSession = New-Object -ComObject "Microsoft.Update.Session"
        $updateSearcher = $updateSession.CreateUpdateSearcher()
        $searchResult = $updateSearcher.Search("IsInstalled=0 and Type='Software'")
        # Agent is functional if we can search for updates
    } catch {
        $failedChecks += "Update Agent: $($_.Exception.Message)"
    }

    # Enhanced Group Policy blocking checks
    $registryPaths = @(
        "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate",
        "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU"
    )
    
    $policyBlocks = @()
    
    # Check main WindowsUpdate policy key
    if (Test-Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate") {
        $updatePolicies = Get-ItemProperty "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate" -ErrorAction SilentlyContinue
        
        # Check for DoNotConnectToWindowsUpdateInternetLocations
        if ($updatePolicies.DoNotConnectToWindowsUpdateInternetLocations -eq 1) {
            $policyBlocks += "Internet access blocked via DoNotConnectToWindowsUpdateInternetLocations"
        }
        
        # Check for SetDisableUXWUAccess (Remove access to use all Windows Update features)
        if ($updatePolicies.SetDisableUXWUAccess -eq 1) {
            $policyBlocks += "Windows Update access disabled via SetDisableUXWUAccess"
        }
        
        # Check for WSUS server configuration that might block updates
        if ($updatePolicies.WUServer -and $updatePolicies.UseWUServer -eq 1) {
            $warningChecks += "WSUS Server configured: $($updatePolicies.WUServer)"
        }
    }
    
    # Check AU (Automatic Updates) policy key
    if (Test-Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU") {
        $auPolicies = Get-ItemProperty "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU" -ErrorAction SilentlyContinue
        
        # Check for NoAutoUpdate (completely disables automatic updates)
        if ($auPolicies.NoAutoUpdate -eq 1) {
            $policyBlocks += "Automatic Updates disabled via NoAutoUpdate"
        }
        
        # Check for AUOptions settings that might block updates
        if ($auPolicies.AUOptions) {
            switch ($auPolicies.AUOptions) {
                1 { $policyBlocks += "Updates disabled via AUOptions (Keep system admin in control)" }
                2 { $warningChecks += "Updates require notification before download (AUOptions=2)" }
                3 { $warningChecks += "Updates auto-download but require install notification (AUOptions=3)" }
                4 { $warningChecks += "Updates scheduled for automatic installation (AUOptions=4)" }
                5 { $warningChecks += "Local admin controls update settings (AUOptions=5)" }
                7 { $warningChecks += "Auto download with install/restart notifications (AUOptions=7)" }
            }
        }
        
        # Check for ScheduledInstallDay (0 = every day, 1-7 = specific days)
        if ($auPolicies.ScheduledInstallDay -and $auPolicies.ScheduledInstallDay -ne 0) {
            $dayNames = @("", "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday")
            $warningChecks += "Updates scheduled only for $($dayNames[$auPolicies.ScheduledInstallDay])"
        }
    }
    
    # Check additional blocking policies
    $additionalPolicyPaths = @(
        @{Path="HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\WindowsUpdate\Auto Update"; Key="EnableFeaturedSoftware"; BlockValue=0; Description="Featured software downloads disabled"},
        @{Path="HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\WindowsUpdate\Auto Update"; Key="IncludeRecommendedUpdates"; BlockValue=0; Description="Recommended updates excluded"}
    )
    
    foreach ($policyCheck in $additionalPolicyPaths) {
        if (Test-Path $policyCheck.Path) {
            $policyValue = Get-ItemProperty $policyCheck.Path -Name $policyCheck.Key -ErrorAction SilentlyContinue
            if ($policyValue -and $policyValue.($policyCheck.Key) -eq $policyCheck.BlockValue) {
                $warningChecks += $policyCheck.Description
            }
        }
    }
    
    if ($policyBlocks.Count -gt 0) {
        $failedChecks += "Group Policy Blocks: $($policyBlocks -join '; ')"
    }

    # Check last successful update (warning only)
    try {
        $updateHistory = Get-WinEvent -FilterHashtable @{LogName='System'; ID=19} -MaxEvents 1 -ErrorAction SilentlyContinue
        if ($updateHistory) {
            $daysSinceUpdate = ((Get-Date) - $updateHistory.TimeCreated).Days
            if ($daysSinceUpdate -gt 30) {
                $warningChecks += "Last Update: $daysSinceUpdate days ago"
            }
        } else {
            $warningChecks += "Cannot determine last update time"
        }
    } catch {
        $warningChecks += "Update history check failed"
    }

    # Check connectivity time requirements (warning only)
    try {
        $bootTime = (Get-CimInstance -ClassName Win32_OperatingSystem).LastBootUpTime
        $uptime = ((Get-Date) - $bootTime).TotalHours
        if ($uptime -lt 8) {
            $warningChecks += "Device only online for $([math]::Round($uptime, 1)) hours (need 8+ for reliable updates)"
        }
    } catch {
        $warningChecks += "Cannot determine uptime"
    }

} catch {
    $failedChecks += "CRITICAL ERROR: $($_.Exception.Message)"
}

# Determine output based on failed checks
if ($failedChecks.Count -eq 0) {
    # All critical checks passed - return Running
    if ($warningChecks.Count -gt 0) {
        return "Running (Warnings: $($warningChecks -join '; '))"
    } else {
        return "Running"
    }
} else {
    # Critical issues found - return blocking information
    return "BLOCKED: $($failedChecks -join '; ')"
}
